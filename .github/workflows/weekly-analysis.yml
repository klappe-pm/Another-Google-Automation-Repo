name: Weekly Repository Deep Analysis

on:
  schedule:
    # Run every Sunday at 6:00 AM UTC for comprehensive weekly analysis
    - cron: '0 6 * * 0'
  workflow_dispatch: # Allow manual triggering

jobs:
  weekly-deep-analysis:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      issues: write
      pull-requests: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Create reports directory
      run: mkdir -p reports/weekly

    - name: Run comprehensive analysis
      run: |
        echo "🔍 Running weekly deep analysis..."
        
        # Run all report types
        npm run repo:report-overview > reports/weekly/overview-$(date +%Y-%m-%d).json
        npm run repo:report-security > reports/weekly/security-$(date +%Y-%m-%d).json
        npm run repo:report-code > reports/weekly/code-stats-$(date +%Y-%m-%d).json
        
        # Generate version history
        npm run version:history > reports/weekly/version-history-$(date +%Y-%m-%d).txt

    - name: Generate weekly trends report
      run: |
        DATE=$(date '+%Y-%m-%d')
        WEEK_AGO=$(date -d '7 days ago' '+%Y-%m-%d')
        
        cat > reports/weekly/trends-$DATE.md << EOF
        # Weekly Repository Trends - $DATE
        
        **Analysis Period**: $WEEK_AGO to $DATE
        **Generated**: $(date '+%Y-%m-%d %H:%M:%S UTC')
        
        ## 📊 Weekly Metrics
        
        ### Commit Activity
        \`\`\`
        Commits this week: $(git rev-list --count --since="7 days ago" HEAD)
        Files changed: $(git log --since="7 days ago" --name-only --pretty=format: | sort | uniq | wc -l)
        Lines added: $(git log --since="7 days ago" --numstat --pretty=format: | awk '{add += \$1} END {print add+0}')
        Lines removed: $(git log --since="7 days ago" --numstat --pretty=format: | awk '{del += \$2} END {print del+0}')
        \`\`\`
        
        ### Repository Health Trends
        - **Scripts Added**: $(find scripts/ -name "*.gs" -newermt "$WEEK_AGO" | wc -l)
        - **Documentation Updates**: $(find . -name "README.md" -newermt "$WEEK_AGO" | wc -l)
        - **Tool Updates**: $(find tools/ -name "*.js" -newermt "$WEEK_AGO" | wc -l)
        
        ### Recent Commits
        $(git log --since="7 days ago" --oneline --max-count=10)
        
        ## 🎯 Recommendations
        - Continue regular maintenance and updates
        - Monitor security vulnerabilities weekly
        - Update documentation as scripts evolve
        - Consider version bump if significant changes accumulated
        
        ---
        *Weekly automated analysis - AGAR Repository Management System*
        EOF

    - name: Check repository health score trends
      run: |
        echo "📈 Analyzing health score trends..."
        # This would compare current health scores with historical data
        # For now, we'll just run a current assessment
        npm run repo:review > reports/weekly/health-assessment-$(date +%Y-%m-%d).txt

    - name: Generate release readiness report
      run: |
        DATE=$(date '+%Y-%m-%d')
        CURRENT_VERSION=$(npm run version:current --silent)
        
        cat > reports/weekly/release-readiness-$DATE.md << EOF
        # Release Readiness Assessment - $DATE
        
        **Current Version**: $CURRENT_VERSION
        **Assessment Date**: $DATE
        
        ## 🚀 Release Readiness Checklist
        
        $(npm run repo:review --silent | grep -E "(✅|❌|⚠️)" || echo "- Run detailed assessment manually")
        
        ## 📋 Pre-Release Actions
        - [ ] Review all weekly reports
        - [ ] Address any critical security issues
        - [ ] Update documentation if needed
        - [ ] Prepare release notes
        - [ ] Consider version bump type (patch/minor/major)
        
        ## 📊 Weekly Statistics Summary
        - **Repository Health**: See health-assessment-$DATE.txt
        - **Security Status**: See security-$DATE.json
        - **Code Quality**: See code-stats-$DATE.json
        
        ## 🎯 Next Steps
        1. Review all generated reports
        2. Address any identified issues
        3. Consider preparing a new release if significant changes
        4. Update project roadmap based on trends
        
        ---
        *Weekly release readiness assessment*
        EOF

    - name: Commit weekly reports
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action - Weekly Analysis"
        
        DATE=$(date '+%Y-%m-%d')
        git add reports/weekly/
        
        if ! git diff --staged --quiet; then
          git commit -m "docs: Weekly repository analysis - $DATE

          - Comprehensive weekly trends and metrics analysis
          - Repository health assessment and trends
          - Release readiness evaluation
          - Security and code quality deep dive
          
          [automated-weekly-analysis]"
          
          git push
        else
          echo "No weekly reports to commit"
        fi

    - name: Create weekly summary issue
      uses: actions/github-script@v7
      with:
        script: |
          const date = new Date().toISOString().split('T')[0];
          const fs = require('fs');
          
          let trendsContent = '';
          try {
            trendsContent = fs.readFileSync(`reports/weekly/trends-${date}.md`, 'utf8');
          } catch (e) {
            trendsContent = 'Trends report not available';
          }
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `📊 Weekly Repository Analysis - ${date}`,
            body: `# Weekly Repository Analysis Summary
            
            **Week Ending**: ${date}
            **Analysis Type**: Automated Weekly Deep Dive
            
            ## 📋 Reports Generated
            - 📊 Repository trends and metrics
            - 🔒 Security analysis deep dive  
            - ⚡ Code quality assessment
            - 🚀 Release readiness evaluation
            - 📈 Version history analysis
            
            ## 📁 Report Files
            Check the \`reports/weekly/\` directory for detailed analysis files:
            - \`trends-${date}.md\` - Weekly trends analysis
            - \`health-assessment-${date}.txt\` - Repository health score
            - \`release-readiness-${date}.md\` - Release preparation checklist
            - \`security-${date}.json\` - Security analysis data
            - \`code-stats-${date}.json\` - Code quality metrics
            
            ## 🎯 Action Items
            1. Review all generated weekly reports
            2. Address any critical issues identified
            3. Consider release planning based on readiness assessment
            4. Update documentation based on trends
            
            ## 📊 Quick Stats
            This week's activity and repository health metrics are available in the detailed reports.
            
            ---
            **Next Weekly Analysis**: ${new Date(Date.now() + 7*24*60*60*1000).toISOString().split('T')[0]}
            
            *This issue was automatically created by the weekly analysis workflow.*
            *Close this issue after reviewing all reports and addressing action items.*`,
            labels: ['automated', 'weekly-analysis', 'reports']
          })
