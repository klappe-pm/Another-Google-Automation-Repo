name: Snyk Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run comprehensive security scan every Monday at 2 AM UTC
    - cron: '0 2 * * 1'
  workflow_dispatch:
    # Allow manual triggering of security scans

env:
  NODE_VERSION: '18'

jobs:
  snyk-security-test:
    name: Snyk Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi
          
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: >
            --all-projects
            --severity-threshold=high
            
      - name: Upload Snyk results to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        continue-on-error: true
        with:
          sarif_file: snyk.sarif
          
      - name: Create security report summary
        if: always()
        run: |
          echo "## 🛡️ Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Scan completed at:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -f snyk.sarif ]; then
            echo "Security scan completed. Results uploaded to GitHub Security tab." >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ No vulnerabilities found!" >> $GITHUB_STEP_SUMMARY
          fi

  gas-security-scan:
    name: Google Apps Script Security Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Create security tools directory
        run: mkdir -p security/reports
        
      - name: Run basic security checks
        run: |
          echo "=== Google Apps Script Security Scan ===" 
          
          # Count total .gs files
          TOTAL_FILES=$(find projects/ -name "*.gs" -type f 2>/dev/null | wc -l || echo "0")
          echo "Files scanned: $TOTAL_FILES"
          
          # Check for potential hardcoded credentials (simple patterns)
          CRED_ISSUES=0
          if find projects/ -name "*.gs" -type f -exec grep -l "password\s*=" {} \; 2>/dev/null | grep -q .; then
            echo "⚠️  Potential hardcoded passwords found"
            CRED_ISSUES=$((CRED_ISSUES + 1))
          fi
          
          if find projects/ -name "*.gs" -type f -exec grep -l "api_key\s*=" {} \; 2>/dev/null | grep -q .; then
            echo "⚠️  Potential hardcoded API keys found"
            CRED_ISSUES=$((CRED_ISSUES + 1))
          fi
          
          if find projects/ -name "*.gs" -type f -exec grep -l "secret\s*=" {} \; 2>/dev/null | grep -q .; then
            echo "⚠️  Potential hardcoded secrets found"
            CRED_ISSUES=$((CRED_ISSUES + 1))
          fi
          
          # Check for insecure patterns
          INSECURE_ISSUES=0
          if find projects/ -name "*.gs" -type f -exec grep -l "eval(" {} \; 2>/dev/null | grep -q .; then
            echo "⚠️  Use of eval() detected"
            INSECURE_ISSUES=$((INSECURE_ISSUES + 1))
          fi
          
          # Create simple report
          cat > security/reports/gas-security-report.json << EOF
{
  "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
  "scanner": "GAS Security Scanner v1.0",
  "totalFiles": $TOTAL_FILES,
  "summary": {
    "critical": $CRED_ISSUES,
    "high": $INSECURE_ISSUES,
    "medium": 0,
    "low": 0
  },
  "status": "$([ $CRED_ISSUES -gt 0 ] && echo "CRITICAL" || [ $INSECURE_ISSUES -gt 0 ] && echo "HIGH" || echo "PASS")"
}
EOF
          
          echo "Status: $([ $CRED_ISSUES -gt 0 ] && echo "CRITICAL" || [ $INSECURE_ISSUES -gt 0 ] && echo "HIGH" || echo "PASS")"
          echo "Critical vulnerabilities: $CRED_ISSUES"
          echo "High vulnerabilities: $INSECURE_ISSUES"
          
          if [ $CRED_ISSUES -gt 0 ]; then
            echo "❌ Critical security vulnerabilities found!"
            exit 1
          elif [ $INSECURE_ISSUES -gt 0 ]; then
            echo "⚠️  High severity vulnerabilities found. Please review."
          else
            echo "✅ No critical security issues found."
          fi
          
      - name: Upload GAS security report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: gas-security-report
          path: security/reports/gas-security-report.json
          retention-days: 30

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [snyk-security-test, gas-security-scan]
    if: always()
    
    steps:
      - name: Create comprehensive security summary
        run: |
          echo "## 📊 Complete Security Assessment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Vulnerabilities | ${{ needs.snyk-security-test.result == 'success' && '✅ Pass' || '⚠️ Check Required' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Google Apps Script Security | ${{ needs.gas-security-scan.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Scan completed:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.gas-security-scan.result }}" != "success" ]]; then
            echo "⚠️ **Action required:** Security vulnerabilities detected. Please review the detailed reports." >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ **Security checks completed!** Review any warnings in individual jobs." >> $GITHUB_STEP_SUMMARY
          fi
