# Optimized Cloud Build configuration for Google Apps Script deployment
# Uses Node.js base image with gcloud tools added for reliability

steps:
  # Single combined step: Use Node.js base, add gcloud, deploy all projects
  - name: 'node:18'
    entrypoint: 'bash'
    timeout: '1200s'  # 20 minutes
    args:
      - '-c'
      - |
        set -e  # Exit immediately if a command fails
        
        echo "üöÄ Google Apps Script Deployment Pipeline"
        echo "========================================"
        
        # Step 0: Verify Node.js environment
        echo "‚úÖ Node.js environment ready"
        echo "Node.js version: $$(node --version)"
        echo "npm version: $$(npm --version)"
        
        # Step 1: Install Google Cloud SDK using sudo for permissions
        echo "üì¶ Installing Google Cloud SDK..."
        sudo apt-get update && sudo apt-get install -y apt-transport-https ca-certificates gnupg curl
        curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
        echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee /etc/apt/sources.list.d/google-cloud-sdk.list
        sudo apt-get update && sudo apt-get install -y google-cloud-sdk
        echo "‚úÖ Google Cloud SDK installed: $$(gcloud --version | head -1)"
        
        # Step 2: Install clasp globally (no sudo needed for npm)
        echo "üì• Installing @google/clasp..."
        npm install -g @google/clasp
        echo "‚úÖ Clasp installed: $$(clasp --version)"
        
        # Step 3: Set up authentication using Secret Manager
        echo "üîê Setting up clasp credentials..."
        gcloud secrets versions access latest \
          --secret="clasp-credentials" \
          --project="workspace-automation-466800" > ~/.clasprc.json
        chmod 600 ~/.clasprc.json
        
        # Verify credentials are valid
        if clasp login --status > /dev/null 2>&1; then
          echo "‚úÖ Clasp authentication successful"
        else
          echo "‚ùå Clasp authentication failed"
          exit 1
        fi
        
        # Step 4: Deploy all Apps Script projects
        echo "üì§ Starting deployment to all projects..."
        echo ""
        
        # Define all project directories
        PROJECTS=(
          "projects/calendar"
          "projects/chat" 
          "projects/docs"
          "projects/drive"
          "projects/gmail"
          "projects/photos"
          "projects/sheets"
          "projects/slides"
          "projects/tasks"
          "projects/utility"
        )
        
        # Deployment tracking
        SUCCESS_COUNT=0
        TOTAL_PROJECTS=0
        FAILED_PROJECTS=""
        
        # Deploy each project
        for PROJECT_DIR in "$${PROJECTS[@]}"; do
          if [ -d "$$PROJECT_DIR" ] && [ -f "$$PROJECT_DIR/.clasp.json" ]; then
            TOTAL_PROJECTS=$$((TOTAL_PROJECTS + 1))
            echo "üîÑ Deploying $$PROJECT_DIR..."
            
            # Use subshell to avoid changing working directory permanently
            if (cd "$$PROJECT_DIR" && clasp push --force); then
              echo "‚úÖ $$PROJECT_DIR deployed successfully"
              SUCCESS_COUNT=$$((SUCCESS_COUNT + 1))
            else
              echo "‚ùå $$PROJECT_DIR deployment failed"
              FAILED_PROJECTS="$$FAILED_PROJECTS $$PROJECT_DIR"
            fi
            echo ""
          else
            echo "‚ö†Ô∏è  Skipping $$PROJECT_DIR (missing directory or .clasp.json)"
          fi
        done
        
        # Final deployment report
        echo "========================================"
        echo "üìä DEPLOYMENT SUMMARY"
        echo "========================================"
        echo "Total projects: $$TOTAL_PROJECTS"
        echo "Successful: $$SUCCESS_COUNT"
        echo "Failed: $$((TOTAL_PROJECTS - SUCCESS_COUNT))"
        
        if [ $$SUCCESS_COUNT -eq $$TOTAL_PROJECTS ] && [ $$TOTAL_PROJECTS -gt 0 ]; then
          echo ""
          echo "üéâ ALL DEPLOYMENTS COMPLETED SUCCESSFULLY!"
          echo "========================================"
        elif [ -n "$$FAILED_PROJECTS" ]; then
          echo ""
          echo "‚ùå Failed projects:$$FAILED_PROJECTS"
          echo "========================================"
          exit 1
        else
          echo ""
          echo "‚ö†Ô∏è  No valid projects found to deploy"
          echo "========================================"
          exit 1
        fi

# Build configuration
options:
  substitution_option: 'ALLOW_LOOSE'
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'

# Set reasonable timeout for installations + deployments
timeout: '1200s'  # 20 minutes for gcloud installation + all deployments
