# Optimized Cloud Build configuration for Google Apps Script deployment
# Uses Node.js base image with gcloud tools added for reliability

timeout: 1200s # 20 minute timeout
steps:
- name: 'node:18'
  entrypoint: bash
  args:
    - -c
    - |
      set -e # Exit immediately if a command fails

      # Install gcloud using the modern, recommended method
      echo "üöÄ Installing dependencies and Google Cloud SDK..."
      sudo apt-get update && sudo apt-get install -y ca-certificates curl gnupg
      sudo mkdir -p /etc/apt/keyrings
      curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /etc/apt/keyrings/cloud.google.gpg
      echo "deb [signed-by=/etc/apt/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee /etc/apt/sources.list.d/google-cloud-sdk.list
      sudo apt-get update && sudo apt-get install -y google-cloud-sdk

      # --- CRITICAL FIX ---
      # Manually add the gcloud binary to the PATH for this shell session.
      export PATH=$PATH:/usr/lib/google-cloud-sdk/bin
      
      echo "‚úÖ gcloud SDK installed and configured."
      echo "gcloud version: $$(gcloud --version | head -1)"

      # Now run the rest of your script
      echo "üì• Installing @google/clasp..."
      npm install -g @google/clasp
      echo "‚úÖ Clasp installed: $$(clasp --version)"
      
      echo "üîê Setting up clasp credentials..."
      gcloud secrets versions access latest --secret="clasp-credentials" --project="workspace-automation-466800" > ~/.clasprc.json
      chmod 600 ~/.clasprc.json
      
      # Verify credentials are valid
      if clasp login --status > /dev/null 2>&1; then
        echo "‚úÖ Clasp authentication successful"
      else
        echo "‚ùå Clasp authentication failed"
        exit 1
      fi
      
      echo "üì¶ Deploying all Google Apps Script projects..."
      PROJECTS=(
        "projects/calendar" "projects/chat" "projects/docs" "projects/drive"
        "projects/gmail" "projects/photos" "projects/sheets" "projects/slides"
        "projects/tasks" "projects/utility"
      )
      
      SUCCESS_COUNT=0
      TOTAL_PROJECTS=0
      FAILED_PROJECTS=""
      
      for PROJECT_DIR in "$${PROJECTS[@]}"; do
        if [ -d "$$PROJECT_DIR" ] && [ -f "$$PROJECT_DIR/.clasp.json" ]; then
          TOTAL_PROJECTS=$$((TOTAL_PROJECTS + 1))
          echo "   -> Deploying $$PROJECT_DIR..."
          
          if (cd "$$PROJECT_DIR" && clasp push --force); then
            echo "   ‚úÖ $$PROJECT_DIR deployed successfully"
            SUCCESS_COUNT=$$((SUCCESS_COUNT + 1))
          else
            echo "   ‚ùå Failed to deploy $$PROJECT_DIR"
            FAILED_PROJECTS="$$FAILED_PROJECTS $$PROJECT_DIR"
          fi
        else
          echo "   ‚ö†Ô∏è Skipping $$PROJECT_DIR (directory or .clasp.json not found)"
        fi
      done
      
      echo "================================================"
      echo "üìä DEPLOYMENT SUMMARY"
      echo "================================================"
      echo "Total projects: $$TOTAL_PROJECTS"
      echo "‚úÖ Successful deployments: $$SUCCESS_COUNT"
      echo "‚ùå Failed deployments: $$((TOTAL_PROJECTS - SUCCESS_COUNT))"
      
      if [ $$SUCCESS_COUNT -eq $$TOTAL_PROJECTS ] && [ $$TOTAL_PROJECTS -gt 0 ]; then
        echo ""
        echo "üéâ ALL DEPLOYMENTS COMPLETED SUCCESSFULLY!"
      elif [ -n "$$FAILED_PROJECTS" ]; then
        echo "Failed projects:$$FAILED_PROJECTS"
        exit 1
      else
        echo "‚ö†Ô∏è No valid projects found to deploy"
        exit 1
      fi

# Build configuration
options:
  substitution_option: 'ALLOW_LOOSE'
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'
