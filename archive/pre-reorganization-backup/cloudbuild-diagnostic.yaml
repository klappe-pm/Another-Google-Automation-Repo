# Diagnostic Cloud Build Configuration
# Enhanced logging to identify deployment issues
timeout: 1200s
steps:
- name: 'us-central1-docker.pkg.dev/$PROJECT_ID/clasp-builder/clasp-builder:latest'
  entrypoint: bash
  args:
    - -c
    - |
      set -e
      echo "üîç DIAGNOSTIC MODE - Enhanced Logging"
      echo "====================================="
      
      echo "‚úÖ Custom builder environment ready."
      echo "Node.js version: $$(node --version)"
      echo "gcloud version: $$(gcloud --version | head -1)"
      
      # Install clasp
      echo "üì• Installing @google/clasp..."
      npm install -g @google/clasp
      echo "‚úÖ Clasp installed: $$(clasp --version)"
      
      # DIAGNOSTIC: Check project structure
      echo "üìÅ Checking project directories..."
      for dir in projects/*/; do
        if [ -d "$$dir" ]; then
          echo "  Found: $$dir"
          if [ -f "$$dir.clasp.json" ]; then
            echo "    ‚úÖ Has .clasp.json"
            echo "    Script ID: $$(cat $$dir.clasp.json | grep scriptId | head -1)"
          else
            echo "    ‚ùå Missing .clasp.json"
          fi
        fi
      done
      
      # DIAGNOSTIC: Check secret content before authentication
      echo "üîê Checking Secret Manager access..."
      if gcloud secrets versions access latest --secret="clasp-credentials" --project="$PROJECT_ID" > ~/.clasprc.json; then
        echo "‚úÖ Secret retrieved successfully"
        echo "üìã Secret content preview:"
        echo "$$(head -c 200 ~/.clasprc.json)..."
      else
        echo "‚ùå Failed to retrieve clasp-credentials secret"
        exit 1
      fi
      
      chmod 600 ~/.clasprc.json
      
      # DIAGNOSTIC: Test clasp authentication
      echo "üîê Testing clasp authentication..."
      if clasp login --status > /dev/null 2>&1; then
        echo "‚úÖ Clasp authentication successful"
      else
        echo "‚ùå Clasp authentication failed"
        echo "üìã Attempting clasp login --status with verbose output:"
        clasp login --status || true
        echo "üìã Contents of ~/.clasprc.json:"
        cat ~/.clasprc.json | head -10
        exit 1
      fi

      # Deploy with enhanced error reporting
      echo "üì¶ Starting deployment with enhanced diagnostics..."
      PROJECTS=(
        "projects/calendar" "projects/chat" "projects/docs" "projects/drive"
        "projects/gmail" "projects/photos" "projects/sheets" "projects/slides"
        "projects/tasks" "projects/utility"
      )
      
      SUCCESS_COUNT=0
      TOTAL_PROJECTS=0
      FAILED_PROJECTS=""
      
      for PROJECT_DIR in "$${PROJECTS[@]}"; do
        echo "üîç Checking $$PROJECT_DIR..."
        if [ -d "$$PROJECT_DIR" ] && [ -f "$$PROJECT_DIR/.clasp.json" ]; then
          TOTAL_PROJECTS=$$((TOTAL_PROJECTS + 1))
          echo "   -> Deploying $$PROJECT_DIR..."
          
          # Show .clasp.json content for debugging
          echo "   üìã .clasp.json content:"
          cat "$$PROJECT_DIR/.clasp.json"
          
          # Attempt deployment with detailed error output
          if (cd "$$PROJECT_DIR" && clasp push --force); then
            echo "   ‚úÖ $$PROJECT_DIR deployed successfully"
            SUCCESS_COUNT=$$((SUCCESS_COUNT + 1))
          else
            echo "   ‚ùå Failed to deploy $$PROJECT_DIR"
            echo "   üìã Error details:"
            (cd "$$PROJECT_DIR" && clasp push --force 2>&1) || true
            FAILED_PROJECTS="$$FAILED_PROJECTS $$PROJECT_DIR"
          fi
        else
          echo "   ‚ö†Ô∏è Skipping $$PROJECT_DIR (missing directory or .clasp.json)"
          if [ ! -d "$$PROJECT_DIR" ]; then
            echo "      Directory does not exist"
          fi
          if [ ! -f "$$PROJECT_DIR/.clasp.json" ]; then
            echo "      .clasp.json file does not exist"
          fi
        fi
        echo ""
      done
      
      # Report Summary
      echo "================================================="
      echo "üìä DIAGNOSTIC DEPLOYMENT SUMMARY"
      echo "================================================="
      echo "Total projects found: $$TOTAL_PROJECTS"
      echo "‚úÖ Successful deployments: $$SUCCESS_COUNT"
      
      if [ $$SUCCESS_COUNT -eq $$TOTAL_PROJECTS ] && [ $$TOTAL_PROJECTS -gt 0 ]; then
        echo "üéâ ALL DEPLOYMENTS COMPLETED SUCCESSFULLY!"
      else
        echo "‚ùå Failed deployments: $$((TOTAL_PROJECTS - SUCCESS_COUNT))"
        echo "Failed projects:$$FAILED_PROJECTS"
        echo ""
        echo "üîç DIAGNOSTIC COMPLETE - Check logs above for specific errors"
        exit 1
      fi
options:
  substitution_option: ALLOW_LOOSE
  logging: CLOUD_LOGGING_ONLY
  machineType: E2_HIGHCPU_8