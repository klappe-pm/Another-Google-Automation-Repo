# Comprehensive diagnostic Cloud Build configuration
# This file explicitly avoids Docker and uses our custom steps

steps:
  # Step 1: Basic environment check
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:latest'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "=========================================="
        echo "STEP 1: Environment Diagnostics"
        echo "=========================================="
        echo "Project ID: $PROJECT_ID"
        echo "Build ID: $BUILD_ID"
        echo "Current directory: $(pwd)"
        echo "Available files:"
        ls -la
        echo ""
        echo "=== Google Cloud Authentication ==="
        gcloud auth list
        echo ""
        echo "=== Project Configuration ==="
        gcloud config list
        echo ""
        echo "‚úÖ Step 1 Complete: Environment verified"
    env:
      - 'PROJECT_ID=workspace-automation-466800'
      
  # Step 2: Check project structure
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:latest'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "=========================================="
        echo "STEP 2: Project Structure Check"
        echo "=========================================="
        echo "Checking for projects directory..."
        if [ -d "projects" ]; then
          echo "‚úÖ projects/ directory exists"
          echo "Contents:"
          ls -la projects/
          echo ""
          
          for dir in projects/*/; do
            if [ -d "$dir" ]; then
              echo "üìÅ Checking $dir"
              if [ -f "$dir.clasp.json" ]; then
                echo "  ‚úÖ .clasp.json exists"
                echo "  üìÑ Content:"
                cat "$dir.clasp.json" || echo "  ‚ùå Could not read .clasp.json"
                echo ""
              else
                echo "  ‚ùå .clasp.json missing"
              fi
            fi
          done
        else
          echo "‚ùå projects/ directory not found"
          echo "Available directories:"
          ls -la
          exit 1
        fi
        echo "‚úÖ Step 2 Complete: Project structure verified"
        
  # Step 3: Test Secret Manager access
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:latest'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "=========================================="
        echo "STEP 3: Secret Manager Test"
        echo "=========================================="
        if gcloud secrets versions access latest --secret="clasp-credentials" --project="$PROJECT_ID" > /tmp/test-secret.json; then
          echo "‚úÖ Successfully accessed clasp-credentials secret"
          echo "Secret file size: $(wc -c < /tmp/test-secret.json) bytes"
          echo "Secret structure check:"
          if jq . /tmp/test-secret.json > /dev/null 2>&1; then
            echo "‚úÖ Valid JSON format"
            echo "Keys present: $(jq -r 'keys | @csv' /tmp/test-secret.json 2>/dev/null || echo "Unable to parse keys")"
          else
            echo "‚ùå Invalid JSON format"
            echo "First 200 characters of secret:"
            head -c 200 /tmp/test-secret.json
          fi
          rm -f /tmp/test-secret.json
          echo "‚úÖ Step 3 Complete: Secret Manager access verified"
        else
          echo "‚ùå Failed to access clasp-credentials secret"
          echo "Available secrets:"
          gcloud secrets list --project="$PROJECT_ID" || echo "Could not list secrets"
          exit 1
        fi
    env:
      - 'PROJECT_ID=workspace-automation-466800'
      
  # Step 4: Install and test clasp
  - name: 'node:18-alpine'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        echo "=========================================="
        echo "STEP 4: Node.js and clasp Setup"
        echo "=========================================="
        
        # Install required packages
        apk add --no-cache curl bash jq
        
        echo "Node version: $(node --version)"
        echo "NPM version: $(npm --version)"
        
        echo "Installing clasp..."
        npm install -g @google/clasp
        
        echo "Clasp version: $(clasp --version)"
        
        echo "Setting up clasp credentials..."
        mkdir -p ~/.config/@google/clasp
        
        # Get credentials from Secret Manager using gcloud (installed in previous step)
        if command -v gcloud > /dev/null; then
          echo "Using gcloud to fetch credentials..."
          gcloud auth application-default login --no-browser --quiet || echo "ADC setup failed, continuing..."
          gcloud secrets versions access latest --secret="clasp-credentials" --project="workspace-automation-466800" > ~/.clasprc.json
        else
          echo "‚ùå gcloud not available in Node container"
          exit 1
        fi
        
        chmod 600 ~/.clasprc.json
        
        echo "Testing clasp authentication..."
        if clasp login --status; then
          echo "‚úÖ Clasp authentication successful"
          echo "‚úÖ Step 4 Complete: Clasp setup verified"
        else
          echo "‚ùå Clasp authentication failed"
          echo "Credential file content (first 100 chars):"
          head -c 100 ~/.clasprc.json
          exit 1
        fi

  # Step 5: Test deployment to one project
  - name: 'node:18-alpine'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        echo "=========================================="
        echo "STEP 5: Single Project Deployment Test"
        echo "=========================================="
        
        # Install required packages
        apk add --no-cache curl bash jq
        
        # Install clasp
        npm install -g @google/clasp
        
        # Setup credentials (repeat from step 4 since containers don't share state)
        mkdir -p ~/.config/@google/clasp
        
        # For this step, we'll try a simpler approach - embed the credentials
        echo "Setting up clasp credentials..."
        
        # Test with calendar project first (smallest)
        TEST_PROJECT="projects/calendar"
        
        if [ -d "$TEST_PROJECT" ] && [ -f "$TEST_PROJECT/.clasp.json" ]; then
          echo "Testing deployment to $TEST_PROJECT..."
          cd "$TEST_PROJECT"
          
          echo "Project configuration:"
          cat .clasp.json
          
          echo "Available files to deploy:"
          ls -la
          
          echo "Current directory: $(pwd)"
          
          echo "‚úÖ Step 5 Complete: Project structure ready for deployment"
          echo "(Skipping actual clasp push to avoid authentication complexity in final step)"
        else
          echo "‚ùå Test project $TEST_PROJECT not found or invalid"
          echo "Available directories:"
          ls -la projects/ || echo "No projects directory"
          exit 1
        fi

# Explicitly specify no Docker builds
options:
  substitution_option: 'ALLOW_LOOSE'
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'

# Ensure no source or Docker context
sourceProvenance:
  enabled: false
